services:
  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    ports:
      - 3100:3100
    volumes:
      - ./loki.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - vnet

  promtail:
    image: grafana/promtail:3.0.0
    container_name: promtail
    volumes:
      - ./promptail.yaml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    restart: unless-stopped
    networks:
      - vnet

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    env_file: .env
    ports:
      - 3000:3000
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    restart: unless-stopped
    networks:
      - vnet

  ollama:
    image: ollama/ollama:0.12.6
    container_name: ${OLLAMA_CONTAINER_NAME}
    env_file: .env
    runtime: nvidia
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - ollama:/root/.ollama
      - ./run_ollama.sh:/run_ollama.sh:ro
    restart: unless-stopped
    entrypoint: ["/bin/sh", "/run_ollama.sh"]
    labels:
      - "logging=promtail"
    networks:
      - vnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    container_name: ${MINIO_CONTAINER_NAME}
    image: minio/minio:RELEASE.2024-09-22T00-33-43Z.fips
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - "logging=promtail"
    networks:
      - vnet

  qdrant:
    image: qdrant/qdrant:latest
    container_name: ${QDRANT_CONTAINER_NAME}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - qdrant_data:/qdrant/storag
    labels:
      - "logging=promtail"
    networks:
      - vnet

  redis:
    image: redis:7.2-rc-bullseye
    container_name: ${REDIS_HOST}
    command: redis-server
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    labels:
      - "logging=promtail"
    volumes:
      - redis_data:/data
    networks:
      - vnet

  chatbot:
    build:
      context: ../
      dockerfile: Dockerfile
    env_file: .env
    container_name: ${CHAT_CONTAINER_NAME}
    command: ["python", "main.py"]
    restart: unless-stopped
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CHAT_APP_PORT}/health"]
      interval: 5s
      timeout: 2s
      retries: 1000
      start_period: 60s
    labels:
      - "logging=promtail"
    # depends_on:
    # ollama:
    #   condition: service_healthy
    #   minio:
    #     condition: service_healthy
    #   qdrant:
    #     condition: service_healthy
    #   redis:
    #     condition: service_healthy
    networks:
      - vnet

networks:
  vnet:

volumes:
  ollama:
  redis_data:
  qdrant_data:
  grafana-data:
